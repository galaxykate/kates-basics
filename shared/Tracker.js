/**
 * A class fortracking hand/face/etc data
 * and playing or recording data
 *
 **/

const Tracker = (function () {



	function magnitude(v) {
		return Math.sqrt(v.x*v.x + v.y*v.y + v.z*v.z )
	}

	function setTo(v, v2) {
		v.x = v2.x
		v.y = v2.y
		v.z = v2.z
	}

	function setToDifference(v, v0, v1) {
		v.x = v0.x - v1.x
		v.y = v0.y - v1.y
		v.z = v0.z - v1.z
	}

	function setToAverage(v, vs) {
		v.x = 0
		v.y = 0
		v.z = 0
		for (var i = 0; i < vs.length; i++) {
			let v2 = vs[i]
			v.x += v2.x
			v.y += v2.y
			v.z += v2.z
		}
		v.x /= vs.length
		v.y /= vs.length
		v.z /= vs.length
	}

  // Individual lists of
	const CONTOURS = {
		fingers: [
			[1, 2, 3, 4],
			[5, 6, 7, 8],
			[9, 10, 11, 12],
			[13, 14, 15, 16],
			[17, 18, 19, 20],
			],

		centerLine: [
			10, 151, 9, 8, 168, 6, 197, 195, 5, 4, 1, 19, 94, 2, 164, 0, 11, 12, 13, 14,
			15, 16, 17, 18, 200, 199, 175, 152,
			],
		mouthRings: [
			[
				287, 436, 426, 327, 326, 2, 97, 98, 206, 216, 57, 43, 106, 182, 83, 18,
				313, 406, 335, 273,
				],
			[
				291, 410, 322, 391, 393, 164, 167, 165, 92, 186, 61, 146, 91, 181, 84, 17,
				314, 405, 321, 375,
				],
			[
				306, 409, 270, 269, 267, 0, 37, 39, 40, 185, 76, 77, 90, 180, 85, 16, 315,
				404, 320, 307,
				],
			[
				292, 408, 304, 303, 302, 11, 72, 73, 74, 184, 62, 96, 89, 179, 86, 15,
				316, 403, 319, 325,
				],
			[
				308, 407, 310, 311, 312, 13, 82, 81, 80, 183, 78, 95, 88, 178, 87, 14,
				317, 402, 318, 324,
				],
			],

		sides: [
	// RIGHT
		{
			irisCenter: [468],
			irisRing: [469, 470, 471, 472],

			faceRings: [
				[
					10, 109, 67, 103, 54, 21, 162, 127, 234, 93, 132, 58, 172, 136, 150,
					149, 176, 148, 152,
					],
				[
					151, 108, 69, 104, 68, 71, 139, 34, 227, 137, 177, 215, 138, 135, 169,
					170, 140, 171, 175,
					],
				[
					9, 107, 66, 105, 63, 70, 156, 143, 116, 123, 147, 213, 192, 214, 210,
					211, 32, 208, 199,
					],
				],
			eyeRings: [
				[
					122, 168, 107, 66, 105, 63, 70, 156, 143, 116, 123, 50, 101, 100, 47,
					114, 188,
					],
				[
					245, 193, 55, 65, 52, 53, 46, 124, 35, 111, 117, 118, 119, 120, 121,
					128,
					],
				[
					244, 189, 221, 222, 223, 224, 225, 113, 226, 31, 228, 229, 230, 231,
					232, 233,
					],
				[243, 190, 56, 28, 27, 29, 30, 247, 130, 25, 110, 24, 23, 22, 26, 112],
				[
					133, 173, 157, 158, 159, 160, 161, 246, 33, 7, 163, 144, 145, 153,
					154, 155,
					],
				],
		},
	// LEFT
		{
			faceRings: [
				[
					10, 338, 297, 332, 284, 251, 389, 356, 454, 323, 361, 288, 397, 365,
					379, 378, 400, 377, 152,
					],
				[
					151, 337, 299, 333, 298, 301, 368, 264, 447, 366, 401, 435, 367, 364,
					394, 395, 369, 396, 175,
					],
				[
					9, 336, 296, 334, 293, 300, 383, 372, 345, 352, 376, 433, 416, 434,
					430, 431, 262, 428, 199,
					],
				],

			irisCenter: [473],
			irisRing: [476, 475, 474, 477],

			eyeRings: [
				[
					351, 168, 336, 296, 334, 293, 300, 383, 372, 345, 352, 280, 330, 329,
					277, 343, 412,
					],
				[
					465, 417, 285, 295, 282, 283, 276, 353, 265, 340, 346, 347, 348, 349,
					350, 357,
					],
				[
					464, 413, 441, 442, 443, 444, 445, 342, 446, 261, 448, 449, 450, 451,
					452, 453,
					],
				[
					463, 414, 286, 258, 257, 259, 260, 467, 359, 255, 339, 254, 253, 252,
					256, 341,
					],
				[
					362, 398, 384, 385, 386, 387, 388, 466, 263, 249, 390, 373, 374, 380,
					381, 382,
					],
				],
		},
		],

  // [10 109 87 103]
	};

	function checkValidLandmarkData(count, data) {
		if (!Array.isArray(data)) {
			console.log(data);
			throw "Landmark data should be an array";
		}
		data.forEach((pt) => {
			if (pt.length !== 2) {
				console.log("Wrong dimensions on point!", pt);
			}

			if (isNaN(pt[0]) || isNaN(pt[1])) {
				console.log("Non-numbers in point!", pt);
			}
		});
	}

	function printFrameInfo(frame) {
		if (!Array.isArray(frame.hands)) {
			console.warn("Bad tracking frame", frame);
			throw "Tracking frames should have hands";
		}
		if (!Array.isArray(frame.faces)) {
			console.warn("Bad tracking frame", frame);
			throw "Tracking frames should have faces";
		}
		console.log("Faces:", frame.faces.length, "Hands:", frame.hands.length);

		frame.faces.forEach((data) =>
			checkValidLandmarkData(FACE_LANDMARK_COUNT, data)
			);
		frame.hands.forEach((data) =>
			checkValidLandmarkData(HAND_LANDMARK_COUNT, data)
			);
	}



	let trackableCount = 0;


	class Trackable {
		

		static LANDMARK_COUNT = 0
		// A map of all the landmarks' mappable positions and neighbors
		static MAP = []

		static calculateMap() {
			
			if (this.POSITIONS ) {
				let positions  = this.POSITIONS.map((v,i) => {
					let v1 =  new KVector(...v)
					v1.index = i
					return v1
				})

				this.MAP = positions 
				// Compute the voronoi
				if (!this.VORONOI_NEIGHBORS) {
					let diagram = (new Voronoi()).compute(positions, 
						{xl:-1.1, xr:1.1, yt: -1.1, yb: 1.1});

					// Set the neighbors for each
					diagram.cells.forEach(({site, halfedges}) => {
						// Order clockwise
						halfedges = halfedges.sort((a,b) => a.angle > b.angle)
						site.neighbors = halfedges
							.map(he => he.edge.lSite == site?he.edge.rSite:he.edge.lSite)
							.filter(v => v !== null )
							.map(v => v.index)
					})
					
				}

				// Load the Voronoi
				else {
					positions.forEach((pt,i)=> {
						let neighborIndices =this.VORONOI_NEIGHBORS[i]
						
						pt.neighbors = neighborIndices?neighborIndices.map(index => positions[index]):[]
					
					})
				}
			}

		}
	  

		constructor({type, tracker, dimensionality=3}) {
			this.type = type
			this.tracker = tracker

			this.dimensionality = dimensionality
			this.idNumber = trackableCount++;
			this.uid = uuidv4()
			
			this.id = type + this.idNumber
			this.idColor = [(this.idNumber * 73) % 360, 100, 50];
			this.isActive = false;

			

	// Create the landmarks
			this.landmarks = Array.from(
				{ length: this.constructor.LANDMARK_COUNT },
				(x, i) => {
		  // Custom landmark maker
					let lmk = this.tracker.createLandmark(0,0,0)
					lmk.index = i
					lmk.dir0 = new KVector(0, 1, 0)
					lmk.dir1 = new KVector(0, 1, 0)
					
					lmk.id = this.id + "_" + i
					lmk.history = []
					return lmk
				});

			// Metavectors are special vectors we want to track
			this.metaVectors = []

			// Identify the two main axes
			this.axis0 = this.landmarks.slice(0,2)
			this.axis1 = this.landmarks.slice(2,4)
			this.dir0 = this.createMetaVector("dir0")
			this.dir1 = this.createMetaVector("dir1")
			this.center = this.createMetaVector("center")
			this.boundingBox = [this.createMetaVector("bbMin"),this.createMetaVector("bbMax")]
			
		}


		toArray() {
			return this.landmarks.map(lmk => lmk.toArray())
		}



		get flatDataSize() {
			return this.landmarkCount*this.dimensionality
		}

		get landmarkCount() {
			return this.landmarks.length
		}

		get flatData() {
			return this.data.flat()
		}

		set flatData(data) {
			let dim = data.length/this.landmarks.length
			if (dim%1 !== 0)
				throw(`Mismatched array size for ${this}: expected multiple of ${this.landmarks.length}, got ${data.length}`)
			

			this.landmarks.forEach((lmk,index) => {
				let arr = data.slice(index*dim, (index+1)*dim)
				lmk.setTo(arr)
			})
		}

		//---------------------------------------------------
		// Remapping

		get screenNormalizedLandmarks() {
			return this.landmarks.map(lm => this.screenNormalizeLandmark(lm))
		}

		screenNormalizeLandmark(lm) {
			let src = this.tracker.source
			if (!src)
				return new KVector()

			return new KVector(
				remap(lm.x, 0, src.width, -1, 1), 
				remap(lm.y, 0, src.height, -1, 1),
				remap(lm.z, -100, 100, -1, 1))
		}


		get boundingBoxNormalizedLandmarks() {
			return this.landmarks.map(lm => this.boundingBoxNormalizedLandmark(lm))
		}

		boundingBoxNormalizedLandmark(lm) {
			let bb = this.boundingBox
			return new KVector(
				remap(lm.x, bb[0].x, bb[1].x, -1, 1), 
				remap(lm.y, bb[0].y, bb[1].y, -1, 1),
				remap(lm.z, bb[0].z, bb[1].z, -1, 1))
			
		}

		get axisNormalizedLandmarks() {
			// Rotate all landmarks around the ...nose?
			let angle = this.axis[0].getAngleTo(this.axis[1])
			return this.landmarks.map(lm => {
				let v = KVector.sub(lm, this.center)

				v.mult(.01)
				v.rotate(-angle + Math.PI/2)
				// console.log(v.toFixed(2))
				return v
				
			})
			
		}

		

		//---------------------------------------------------
		


		get w() {
			return this.boundingBox[1].x - this.boundingBox[0].x
		}
		get h() {
			return this.boundingBox[1].y - this.boundingBox[0].y
		}
		get d() {
			return this.boundingBox[1].z - this.boundingBox[0].z
		}


		get flatStringData() {
			return this.flatData.map(s => s.toFixed(2)).join(",")
		}

		set flatStringData(data) {
			this.flatData = data.split(",").map(s => parseFloat(s))
		}

		createMetaVector(id) {
	// create a vector that is not one of the landmarks
			let v = this.tracker.createLandmark()
			v.id = id
			v.history = []
			this.metaVectors.push(v)
			return v
		}



		setLandmarksFromTracker(landmarks, imageDimensions) {
			if (landmarks === undefined) {
				this.isActive = false
				return
			}

			this.isActive = true
	
			this.landmarks.forEach((pt, index) => {

	  // Scale and mirror the positions, so they are in screen space
				pt.x = (1 - landmarks[index].x) * imageDimensions[0]*this.tracker.scale
				pt.y = landmarks[index].y * imageDimensions[1]*this.tracker.scale
				pt.z = landmarks[index].z * imageDimensions[1]*this.tracker.scale


			});

			this.landmarks.concat(this.metaVectors).forEach(v => {
				v.history.unshift({
					x: v.x,
					y: v.y,
					z: v.z
				})
				v.history = v.history.slice(0, this.tracker.maxHistory)
			})

		}

		drawDebugData({p, flip=false, x = 0, y = 0, scale = 1.0, drawIndices}) {

			p.fill(...this.idColor);
			p.noStroke()
			this.landmarks.forEach((pt) => {
	  // Landmarks are relative to the image size
				let x0 = x + pt.x*scale
				let y0 = y + pt.y*scale
				p.circle(x0, y0, 3);

				if (drawIndices)
					p.text(pt.index, x0, y0 - 5)
			});
		}

		calculateMetaTrackingData() {
			if (this.isActive) {
				this.boundingBox[0].setTo(999999,999999, 99999)
				this.boundingBox[1].setTo(-999999,-999999, -99999)

				this.landmarks.forEach(lmk => {
					this.boundingBox[0].x = Math.min(this.boundingBox[0].x, lmk.x)
					this.boundingBox[0].y = Math.min(this.boundingBox[0].y, lmk.y)
					this.boundingBox[0].z = Math.min(this.boundingBox[0].z, lmk.z)
					this.boundingBox[1].x = Math.max(this.boundingBox[1].x, lmk.x)
					this.boundingBox[1].y = Math.max(this.boundingBox[1].y, lmk.y)
					this.boundingBox[1].z = Math.max(this.boundingBox[1].z, lmk.z)
					

				})


			}


			// Set all the directions
			this.dir0.setToDifference(...this.axis0).normalize()
			this.dir1.setToDifference(...this.axis1).normalize()
			this.landmarks.forEach(pt => {
				pt.dir0.setTo(this.dir0)
				pt.dir1.setTo(this.dir1)
			})
		}


	}

	const CATEGORIES = [
		"_neutral",
		"browDownLeft",
		"browDownRight",
		"browInnerUp",
		"browOuterUpLeft",
		"browOuterUpRight",
		"cheekPuff",
		"cheekSquintLeft",
		"cheekSquintRight",
		"eyeBlinkLeft",
		"eyeBlinkRight",
		"eyeLookDownLeft",
		"eyeLookDownRight",
		"eyeLookInLeft",
		"eyeLookInRight",
		"eyeLookOutLeft",
		"eyeLookOutRight",
		"eyeLookUpLeft",
		"eyeLookUpRight",
		"eyeSquintLeft",
		"eyeSquintRight",
		"eyeWideLeft",
		"eyeWideRight",
		"jawForward",
		"jawLeft",
		"jawOpen",
		"jawRight",
		"mouthClose",
		"mouthDimpleLeft",
		"mouthDimpleRight",
		"mouthFrownLeft",
		"mouthFrownRight",
		"mouthFunnel",
		"mouthLeft",
		"mouthLowerDownLeft",
		"mouthLowerDownRight",
		"mouthPressLeft",
		"mouthPressRight",
		"mouthPucker",
		"mouthRight",
		"mouthRollLower",
		"mouthRollUpper",
		"mouthShrugLower",
		"mouthShrugUpper",
		"mouthSmileLeft",
		"mouthSmileRight",
		"mouthStretchLeft",
		"mouthStretchRight",
		"mouthUpperUpLeft",
		"mouthUpperUpRight",
		"noseSneerLeft",
		"noseSneerRight",
		];

  /*
  ====================================================================================

  FACES
  ====================================================================================
  */

	class Face extends Trackable {
		static LANDMARK_COUNT = 478
		static POSITIONS = [[0.00,0.33,-0.08],[0.02,0.11,-0.26],[0.01,0.16,-0.11],[0.08,-0.15,-0.20],[0.02,0.04,-0.28],[0.02,-0.07,-0.27],[0.01,-0.33,-0.14],[0.48,-0.44,0.08],[0.01,-0.56,-0.11],[0.01,-0.66,-0.13],[-0.00,-0.95,-0.12],[0.00,0.36,-0.07],[-0.00,0.38,-0.05],[0.00,0.39,-0.03],[-0.00,0.50,-0.00],[-0.00,0.53,-0.01],[-0.00,0.57,-0.02],[-0.00,0.61,-0.01],[-0.00,0.68,0.05],[0.02,0.15,-0.22],[0.09,0.13,-0.15],[0.72,-0.69,0.31],[0.29,-0.37,0.03],[0.36,-0.37,0.03],[0.43,-0.37,0.05],[0.51,-0.41,0.10],[0.23,-0.38,0.03],[0.41,-0.59,0.00],[0.32,-0.57,0.00],[0.49,-0.57,0.02],[0.53,-0.54,0.05],[0.57,-0.36,0.13],[0.29,0.74,0.15],[0.51,-0.47,0.10],[0.75,-0.41,0.36],[0.64,-0.42,0.18],[0.37,-0.03,0.00],[0.10,0.31,-0.07],[0.09,0.37,-0.04],[0.19,0.32,-0.03],[0.25,0.32,0.02],[0.16,0.36,-0.01],[0.22,0.35,0.04],[0.35,0.43,0.14],[0.09,0.11,-0.25],[0.09,0.04,-0.27],[0.62,-0.60,0.06],[0.21,-0.21,-0.02],[0.24,0.04,-0.11],[0.24,-0.00,-0.10],[0.56,-0.06,0.08],[0.09,-0.06,-0.25],[0.48,-0.67,-0.04],[0.57,-0.65,0.00],[0.66,-0.80,0.19],[0.17,-0.59,-0.09],[0.25,-0.53,0.01],[0.40,0.34,0.14],[0.67,0.25,0.58],[0.19,0.09,-0.09],[0.14,0.12,-0.09],[0.32,0.35,0.13],[0.30,0.35,0.12],[0.60,-0.69,0.02],[0.24,0.07,-0.08],[0.36,-0.66,-0.08],[0.37,-0.71,-0.10],[0.40,-0.93,-0.03],[0.64,-0.74,0.09],[0.39,-0.81,-0.07],[0.66,-0.63,0.10],[0.69,-0.65,0.20],[0.10,0.34,-0.06],[0.18,0.34,-0.02],[0.23,0.34,0.03],[0.17,0.10,-0.08],[0.31,0.35,0.13],[0.28,0.41,0.10],[0.29,0.36,0.12],[0.16,0.09,-0.17],[0.21,0.36,0.04],[0.15,0.37,0.01],[0.08,0.38,-0.02],[0.11,0.67,0.06],[0.10,0.60,0.00],[0.10,0.56,-0.01],[0.09,0.52,0.00],[0.08,0.49,0.01],[0.20,0.44,0.06],[0.22,0.45,0.06],[0.23,0.46,0.06],[0.25,0.48,0.07],[0.32,0.24,0.03],[0.74,-0.13,0.61],[0.02,0.16,-0.15],[0.24,0.40,0.10],[0.26,0.41,0.10],[0.11,0.15,-0.09],[0.22,0.10,-0.04],[0.12,0.14,-0.09],[0.28,-0.17,0.00],[0.40,-0.13,0.03],[0.25,0.02,-0.07],[0.57,-0.88,0.07],[0.54,-0.80,0.01],[0.51,-0.73,-0.04],[0.29,0.52,0.11],[0.20,-0.68,-0.12],[0.21,-0.80,-0.11],[0.22,-0.94,-0.10],[0.48,-0.38,0.07],[0.64,-0.31,0.16],[0.19,-0.39,0.04],[0.59,-0.51,0.09],[0.17,-0.24,-0.05],[0.20,0.03,-0.17],[0.70,-0.26,0.23],[0.59,-0.25,0.12],[0.51,-0.22,0.07],[0.38,-0.23,0.04],[0.28,-0.25,0.02],[0.21,-0.28,0.00],[0.08,-0.32,-0.11],[0.69,-0.11,0.23],[0.64,-0.51,0.12],[0.06,0.14,-0.22],[0.21,-0.13,-0.04],[0.77,-0.43,0.53],[0.16,-0.31,-0.01],[0.26,0.02,-0.01],[0.54,-0.46,0.11],[0.20,-0.02,-0.15],[0.71,0.05,0.60],[0.19,-0.41,0.05],[0.15,-0.05,-0.21],[0.56,0.49,0.33],[0.55,0.57,0.42],[0.73,-0.12,0.42],[0.62,0.36,0.37],[0.72,-0.54,0.29],[0.30,0.83,0.19],[0.05,0.16,-0.15],[0.27,-0.08,-0.02],[0.69,-0.41,0.23],[0.42,-0.42,0.05],[0.36,-0.41,0.04],[0.29,0.42,0.11],[0.67,0.03,0.26],[0.17,0.97,0.20],[0.39,0.80,0.30],[0.47,0.70,0.36],[0.00,-0.79,-0.13],[-0.00,1.00,0.18],[0.30,-0.41,0.03],[0.25,-0.41,0.04],[0.21,-0.41,0.05],[0.68,-0.53,0.17],[0.26,-0.48,0.03],[0.32,-0.51,0.02],[0.39,-0.52,0.02],[0.45,-0.52,0.04],[0.48,-0.50,0.06],[0.75,-0.57,0.43],[0.46,-0.43,0.07],[0.01,0.22,-0.09],[0.25,0.21,-0.02],[0.19,0.08,-0.11],[0.12,0.21,-0.08],[0.01,-0.45,-0.11],[0.48,0.61,0.29],[0.40,0.72,0.24],[0.17,0.91,0.14],[0.61,0.43,0.50],[0.22,-0.44,0.04],[0.13,-0.20,-0.12],[0.00,0.95,0.12],[0.29,0.90,0.25],[0.71,0.04,0.43],[0.15,0.47,0.03],[0.16,0.49,0.03],[0.17,0.52,0.02],[0.18,0.55,0.04],[0.22,0.61,0.08],[0.26,0.35,0.08],[0.28,0.34,0.08],[0.29,0.33,0.08],[0.37,0.28,0.08],[0.60,0.09,0.16],[0.12,-0.29,-0.08],[0.15,-0.46,0.00],[0.19,-0.46,0.03],[0.25,0.36,0.09],[0.61,0.26,0.26],[0.10,-0.45,-0.07],[0.25,0.66,0.12],[0.02,-0.16,-0.22],[0.08,-0.23,-0.16],[0.02,-0.24,-0.18],[0.17,-0.09,-0.11],[0.00,0.86,0.08],[0.00,0.76,0.07],[0.13,0.73,0.09],[0.41,0.46,0.17],[0.32,0.07,0.01],[0.34,0.57,0.15],[0.47,0.05,0.04],[0.38,0.14,0.04],[0.52,0.16,0.10],[0.16,0.83,0.10],[0.21,-0.06,-0.07],[0.47,0.52,0.22],[0.38,0.64,0.20],[0.46,0.35,0.16],[0.66,0.16,0.30],[0.54,0.36,0.21],[0.67,0.21,0.43],[0.43,0.22,0.09],[0.17,-0.16,-0.08],[0.18,0.07,-0.18],[0.22,0.07,-0.12],[0.15,0.03,-0.22],[0.21,-0.54,-0.02],[0.34,-0.60,-0.02],[0.44,-0.61,-0.01],[0.52,-0.60,0.01],[0.57,-0.56,0.05],[0.59,-0.44,0.14],[0.75,-0.26,0.39],[0.53,-0.33,0.10],[0.46,-0.30,0.07],[0.37,-0.30,0.05],[0.28,-0.31,0.03],[0.22,-0.33,0.03],[0.17,-0.35,0.02],[0.76,-0.28,0.59],[0.22,0.08,-0.09],[0.13,-0.13,-0.16],[0.14,0.09,-0.22],[0.10,0.12,-0.20],[0.13,0.10,-0.20],[0.20,0.10,-0.07],[0.09,0.14,-0.21],[0.07,0.15,-0.15],[0.17,-0.41,0.04],[0.14,-0.38,0.01],[0.12,-0.36,-0.03],[0.50,-0.48,0.08],[0.55,-0.50,0.08],[-0.04,-0.15,-0.21],[-0.50,-0.43,0.05],[-0.06,0.13,-0.15],[-0.76,-0.68,0.25],[-0.30,-0.36,0.01],[-0.37,-0.36,0.01],[-0.44,-0.36,0.02],[-0.53,-0.40,0.06],[-0.24,-0.37,0.01],[-0.42,-0.57,-0.03],[-0.33,-0.56,-0.02],[-0.50,-0.56,-0.01],[-0.55,-0.52,0.01],[-0.59,-0.35,0.09],[-0.30,0.75,0.13],[-0.53,-0.45,0.06],[-0.79,-0.40,0.31],[-0.67,-0.40,0.13],[-0.37,-0.02,-0.02],[-0.10,0.31,-0.08],[-0.10,0.37,-0.05],[-0.19,0.32,-0.05],[-0.26,0.32,0.00],[-0.17,0.36,-0.02],[-0.24,0.35,0.02],[-0.37,0.44,0.11],[-0.04,0.11,-0.25],[-0.05,0.04,-0.27],[-0.64,-0.58,0.01],[-0.21,-0.20,-0.04],[-0.22,0.05,-0.13],[-0.22,0.00,-0.11],[-0.58,-0.05,0.04],[-0.05,-0.06,-0.25],[-0.48,-0.65,-0.07],[-0.58,-0.63,-0.04],[-0.69,-0.79,0.14],[-0.16,-0.58,-0.10],[-0.26,-0.52,-0.00],[-0.43,0.34,0.11],[-0.74,0.26,0.53],[-0.17,0.09,-0.10],[-0.11,0.12,-0.10],[-0.35,0.35,0.11],[-0.33,0.35,0.10],[-0.61,-0.67,-0.02],[-0.23,0.07,-0.09],[-0.35,-0.64,-0.10],[-0.36,-0.70,-0.12],[-0.41,-0.92,-0.06],[-0.65,-0.73,0.05],[-0.38,-0.80,-0.09],[-0.68,-0.61,0.05],[-0.72,-0.64,0.15],[-0.10,0.34,-0.07],[-0.18,0.34,-0.04],[-0.25,0.34,0.01],[-0.16,0.10,-0.09],[-0.34,0.35,0.10],[-0.30,0.41,0.08],[-0.32,0.36,0.10],[-0.13,0.09,-0.18],[-0.22,0.36,0.03],[-0.16,0.37,-0.00],[-0.09,0.38,-0.02],[-0.12,0.66,0.05],[-0.10,0.60,-0.00],[-0.10,0.56,-0.01],[-0.10,0.52,-0.00],[-0.09,0.49,0.00],[-0.22,0.43,0.05],[-0.24,0.44,0.04],[-0.25,0.46,0.04],[-0.26,0.48,0.05],[-0.33,0.24,0.01],[-0.81,-0.11,0.55],[-0.27,0.40,0.08],[-0.28,0.40,0.08],[-0.09,0.15,-0.10],[-0.21,0.11,-0.05],[-0.10,0.14,-0.10],[-0.28,-0.17,-0.02],[-0.41,-0.13,-0.00],[-0.24,0.03,-0.08],[-0.59,-0.87,0.03],[-0.55,-0.79,-0.03],[-0.51,-0.71,-0.07],[-0.31,0.53,0.09],[-0.19,-0.67,-0.13],[-0.20,-0.80,-0.13],[-0.22,-0.94,-0.11],[-0.50,-0.37,0.04],[-0.66,-0.30,0.12],[-0.20,-0.38,0.02],[-0.61,-0.49,0.05],[-0.16,-0.24,-0.06],[-0.17,0.04,-0.18],[-0.74,-0.25,0.18],[-0.61,-0.24,0.07],[-0.52,-0.21,0.03],[-0.39,-0.22,0.01],[-0.28,-0.25,0.00],[-0.21,-0.27,-0.01],[-0.06,-0.32,-0.12],[-0.73,-0.10,0.18],[-0.66,-0.50,0.07],[-0.02,0.14,-0.22],[-0.20,-0.13,-0.06],[-0.82,-0.42,0.47],[-0.15,-0.30,-0.02],[-0.25,0.02,-0.03],[-0.56,-0.44,0.07],[-0.18,-0.02,-0.17],[-0.78,0.07,0.55],[-0.20,-0.40,0.03],[-0.11,-0.05,-0.22],[-0.60,0.50,0.29],[-0.60,0.58,0.38],[-0.79,-0.11,0.36],[-0.67,0.38,0.33],[-0.76,-0.53,0.24],[-0.32,0.84,0.17],[-0.01,0.16,-0.15],[-0.27,-0.08,-0.03],[-0.73,-0.39,0.18],[-0.43,-0.40,0.02],[-0.37,-0.40,0.01],[-0.31,0.41,0.09],[-0.72,0.04,0.21],[-0.18,0.98,0.19],[-0.41,0.81,0.28],[-0.51,0.71,0.33],[-0.31,-0.40,0.01],[-0.25,-0.40,0.02],[-0.22,-0.40,0.03],[-0.71,-0.51,0.12],[-0.27,-0.47,0.01],[-0.34,-0.50,-0.00],[-0.40,-0.51,-0.00],[-0.46,-0.50,0.01],[-0.50,-0.48,0.02],[-0.80,-0.57,0.37],[-0.47,-0.41,0.04],[-0.25,0.21,-0.03],[-0.17,0.08,-0.12],[-0.10,0.21,-0.08],[-0.51,0.62,0.26],[-0.42,0.73,0.22],[-0.17,0.92,0.13],[-0.67,0.44,0.46],[-0.22,-0.43,0.02],[-0.10,-0.20,-0.13],[-0.31,0.91,0.23],[-0.76,0.06,0.38],[-0.16,0.46,0.02],[-0.17,0.48,0.02],[-0.19,0.52,0.01],[-0.19,0.55,0.02],[-0.23,0.61,0.07],[-0.29,0.35,0.06],[-0.30,0.34,0.06],[-0.31,0.33,0.06],[-0.39,0.28,0.06],[-0.63,0.09,0.11],[-0.10,-0.28,-0.09],[-0.15,-0.45,-0.01],[-0.19,-0.45,0.01],[-0.27,0.36,0.07],[-0.65,0.27,0.22],[-0.08,-0.44,-0.07],[-0.26,0.67,0.10],[-0.05,-0.23,-0.17],[-0.15,-0.09,-0.12],[-0.13,0.74,0.08],[-0.43,0.46,0.14],[-0.32,0.07,-0.01],[-0.36,0.57,0.13],[-0.49,0.06,0.01],[-0.39,0.14,0.02],[-0.54,0.16,0.07],[-0.16,0.83,0.09],[-0.20,-0.06,-0.08],[-0.49,0.53,0.19],[-0.40,0.64,0.17],[-0.48,0.35,0.13],[-0.70,0.17,0.25],[-0.57,0.37,0.17],[-0.73,0.22,0.38],[-0.45,0.22,0.05],[-0.15,-0.16,-0.09],[-0.15,0.07,-0.19],[-0.20,0.08,-0.13],[-0.12,0.03,-0.23],[-0.22,-0.53,-0.03],[-0.34,-0.59,-0.04],[-0.45,-0.60,-0.04],[-0.53,-0.58,-0.02],[-0.58,-0.55,0.01],[-0.61,-0.42,0.09],[-0.80,-0.25,0.34],[-0.55,-0.32,0.06],[-0.47,-0.29,0.04],[-0.38,-0.29,0.02],[-0.29,-0.31,0.01],[-0.22,-0.32,0.01],[-0.17,-0.34,0.00],[-0.82,-0.27,0.53],[-0.20,0.09,-0.10],[-0.10,-0.13,-0.17],[-0.10,0.09,-0.23],[-0.06,0.13,-0.20],[-0.10,0.10,-0.20],[-0.18,0.11,-0.08],[-0.05,0.14,-0.22],[-0.04,0.15,-0.15],[-0.18,-0.40,0.02],[-0.14,-0.38,-0.01],[-0.11,-0.35,-0.04],[-0.51,-0.46,0.04],[-0.57,-0.49,0.04],[0.36,-0.47,0.04],[0.28,-0.46,0.04],[0.35,-0.53,0.04],[0.43,-0.47,0.04],[0.36,-0.40,0.04],[-0.39,-0.45,0.03],[-0.46,-0.46,0.03],[-0.39,-0.52,0.03],[-0.31,-0.45,0.03],[-0.39,-0.39,0.03]]
		static VORONOI_NEIGHBORS = [[302,11,82,72,37,164,267],[274,354,19,125,44,4],[370,164,94,19,354],[5,51,236,174,196,195],[275,274,1,45,51,5,281],[281,4,51,3,195,248],[351,197,122,245,168,417],[163,25,33,246,161,471],[417,168,193,55,9,285],[285,8,55,107,151,336],[338,337,151,108,109],[312,12,82,0,302],[312,13,82,11],[317,14,87,82,12,312],[15,87,13,317],[315,16,86,87,14,317,316],[314,17,84,85,86,15,315],[18,83,84,16,314],[421,200,83,17,314,313],[2,94,141,125,1,354],[125,241,238,44],[71,162,54,68],[232,231,23,153,154,26],[22,231,230,24,472,153],[23,230,229,110,163,144,472],[110,228,31,226,130,33,7,163],[232,22,154,155,112],[470,159,160,29,223,65,222],[221,56,158,470,222,107,55],[160,161,30,224,223,27],[161,246,247,225,224,29],[228,117,111,35,226,25],[208,140,149,170,211,194,201],[7,25,130,247,246],[143,234,127],[31,111,143,124,226],[129,203,205,50,101,142],[0,72,41,73,39,167,164],[82,81,72],[73,42,74,40,165,167,37],[39,74,183,184,185,92,165],[81,80,73,37,72],[80,191,74,39,73],[106,202,57,61,146],[1,125,20,238,239,45],[4,44,239,237,220,51],[225,124,156,70,53],[217,126,100,120,121,114],[219,64,129,102,49,115],[115,48,102,129,142,209,131],[36,205,187,147,123,117,118,101],[4,45,134,236,3,5],[65,223,224,53,105,66],[224,225,46,63,105,52],[104,68,21,103],[8,193,189,221,28,107,9],[157,158,28,221],[61,43,202,212,216,186],[192,138,172,132,215],[75,240,166],[238,99,167,165,240,75,79,237,239],[76,78,146,43,57,186,185],[78,76,185,184],[53,70,71,68,104,105],[219,235,98,203,129,48],[222,27,223,52,66,107],[107,65,52,105,69,108],[69,104,103,109],[63,71,21,54,104],[108,66,105,104,67,109],[46,156,139,162,71,63],[70,162,21,68,63],[82,38,81,41,37,0],[41,80,42,39,37],[42,191,183,40,39],[60,240,59,79],[62,78,61,185],[96,146,78],[191,77,146,61,76,62,184,183],[237,60,75,218,220],[41,81,88,95,191,42,73],[38,82,178,88,80,41,72],[12,13,87,178,81,38,72,0,11],[18,200,201,194,182,84,17],[17,83,182,181,85,16],[16,84,181,180,86],[15,16,85,180,179,178,87],[14,15,86,178,82,13],[178,179,89,95,80,81],[179,90,96,95,88],[179,180,91,96,89],[180,181,106,146,96,90],[40,185,186,216,206,165],[123,137,177,234,227,116],[2,164,141,19],[88,89,96,191,80],[89,90,91,146,77,191,95],[242,167,99,241],[240,165,203,64,235],[97,167,60,238],[126,142,101,119,120,47],[142,36,50,118,119,100],[48,129,49],[104,54,67],[105,63,68,54,103,67,69],[66,52,53,63,104,69],[181,182,204,202,43,146,91],[9,55,28,222,65,66,108,151],[151,107,66,69,109,10],[108,69,67,10],[24,229,228,25,163],[117,116,234,143,35,31],[244,233,232,26,155,133,243],[247,226,124,225],[174,217,47,121,128,188],[220,218,219,48,49,131],[117,123,93,227,234,111],[118,50,123,116,111,31,228],[101,50,117,228,229,119],[100,101,118,229,230,120],[47,100,119,230,231,121],[114,47,120,231,232,128],[197,196,188,245,6],[50,147,177,137,93,116,117],[113,226,35,143,156,46,225],[19,141,242,20,44,1],[198,209,142,100,47,217],[143,34,234,162,139],[188,114,121,232,233,245],[102,48,64,203,36,142,49],[25,226,247,33],[220,115,49,209,134],[187,213,215,58,177,147],[243,112,155,173,190],[220,131,209,198,236,51],[210,136,172,214,202],[169,150,172,135,210],[123,177,93],[214,172,58,192],[156,143,127,162,70],[208,176,149,32],[94,164,167,242,125,19],[209,49,129,36,101,100,126],[111,234,34,127,139,156,124,35],[145,472,24,163,471,468],[153,472,144,468],[91,106,43,61,78,77,96],[187,132,177,123,50],[152,176,171,175],[140,176,150,170,32],[170,149,136,169,211],[336,9,107,108,10,337],[148,175,377],[154,22,23,472,145,468,469],[155,26,22,153,469,173],[133,112,26,154,173],[124,143,139,70,46],[190,173,469,158,56,221],[157,469,468,470,28,56],[468,471,160,27,470],[159,471,161,29,27],[471,7,246,30,29,160],[139,127,21,71,70],[144,24,110,25,7,471],[267,0,37,167,141,94,2,370,462,393],[167,39,40,92,206,203,98,240,60],[59,235,219,218],[164,37,39,165,60,99,97,242,141],[417,6,245,193,8],[211,150,136,210,204],[32,149,150,211],[175,148,176,208,199],[135,136,58,138,214],[133,155,154,469,157,190],[3,236,217,114,188,196],[377,152,148,171,199,396],[171,148,149,140,208],[132,93,137,123,147],[87,86,179,88,81,82],[86,180,90,89,88,178],[86,85,181,91,90,179],[85,84,182,106,91,180],[83,194,204,106,181,84],[191,78,184,40,74],[183,78,62,185,40],[184,62,76,61,186,92,40],[185,61,57,216,92],[207,213,132,147,50,205],[196,174,114,128,245,122],[193,243,190,221,55],[189,243,133,173,157,221],[80,95,96,78,183,74,42],[214,138,58,215,213,207,216],[168,245,244,243,189,55,8],[83,201,32,211,204,182],[248,5,3,196,197,419],[195,3,174,188,122,197],[419,195,196,122,6,351],[134,209,126,217,236],[396,175,171,208,200,428],[428,199,208,201,83,18,421],[200,208,32,194,83],[106,204,210,135,214,212,57,43],[64,98,165,206,205,36,129],[182,194,211,169,210,202,106],[203,206,207,187,50,36],[165,92,216,207,205,203],[216,192,213,187,205,206],[199,171,176,140,32,201,200],[134,131,49,142,126,198],[204,169,136,135,202],[194,32,170,150,169,204],[202,214,216,57],[207,192,215,132,187],[202,135,172,138,192,216,212],[192,58,132,213],[92,186,57,212,214,192,207,206],[236,198,126,47,114,174],[79,166,219,115,220],[218,166,235,64,48,115],[45,237,79,218,115,131,134],[189,190,157,56,28,55],[28,470,27,65,107],[27,29,224,52,65],[29,30,225,53,52,223],[30,247,113,124,46,53,224],[25,31,35,124,113,247,130],[116,93,234],[229,118,117,31,25,110],[230,119,118,228,110,24],[120,119,229,24,23,231],[121,120,230,23,22,232],[128,121,231,22,26,112,233],[128,232,112,244,245],[116,227,93,127,34,143,111],[166,240,98,64,219],[51,134,198,217,174,3],[239,60,79,220,45],[20,99,60,239,44],[44,238,60,237,45],[75,60,165,98,235,59],[242,97,20],[141,167,97,241,125],[244,112,133,190,189,193],[245,233,112,243,193],[6,122,188,128,233,244,193,168],[7,33,247,30,161],[246,33,130,226,113,225,30],[456,281,5,195,419,399],[255,339,390,474,466,263],null,[389,301,298,284],[253,451,256,381,380],[254,450,451,252,380,374,477],[449,450,253,477,373,390,339],[261,448,339,249,263,359,446],[252,451,452,341,382,381],[259,387,386,475,442,295,443],[475,385,286,442],[260,388,387,257,443,444],[467,388,259,444,445],[340,346,448,255,446,265],[378,369,428,421,418,431,395],[359,255,249,466,467],[454,372,383,368,356],[372,340,261,446,353,383],[425,426,423,358,371,330],[269,303,302,0,164,393],[311,312,302],[270,304,272,310,303,267,393,391],[409,408,407,304,269,391,322],[310,311,302,303],[415,324,310,269,304],[422,424,335,321,375,291,287],[458,461,354,1,4,275,457,459],[457,274,4,281,363,440],[383,353,342,445,283,293,300],[329,355,437,343,350,349],[294,439,344,279,331],[358,331,278,344,360,429,371],[376,411,425,330,347,346,352],[363,275,4,5,248,456],[283,444,443,295,296,334],[276,445,444,282,334,293],[251,298,333,332],[441,413,417,8,9,336],[385,384,441,442,258],[432,422,273,291,410,436],[397,367,416,435,361],[455,460,305,392],[328,459,309,305,460],[273,375,308,306,409,410,287],[306,308,409],[301,300,276,283,334,333,298],[423,327,455,439,278,331],[443,257,442,336,296,282],[282,295,336,337,299,334],[332,333,299,338],[251,301,293,333,284],[333,334,296,337,338,297],[368,383,276,293,301],[389,368,300,293,298,251],[303,271,311,268,312,11,0,267],[310,271,302,267,269],[415,272,269,270],[460,290,309,438,289],[291,308,292,409],[375,321,320,325,308],[375,307,325,407,408,292,306,291],[305,290,459,457,440,438],[324,318,271,303,269,272],[318,402,312,268,302,271],[402,317,13,12,11,302,268,311],[418,421,18,314,406],[406,313,18,17,16,315,405],[314,16,15,316,405],[404,405,315,15,317,403],[316,15,14,13,312,402,403],[319,320,403,402,311,310,324],[320,318,324],[321,404,403,318,319,307],[335,405,404,320,307,375,273],[410,409,270,391,426,436],[361,401,366,447,454],[325,319,318,310,272,415],[307,324,415,407,308],[393,462,461,458,328],[391,460,455,294,423],[393,326,458,459,290,460],[330,371,355,277,349,348],[280,425,266,371,329,348,347],[423,294,278,279,358],[284,333,297],[284,298,293,334,299,297,332],[293,283,282,296,299,333],[424,406,405,321,273],[295,442,441,285,9,151,337,296],[299,296,336,151,10,338],[297,299,337,10],[448,449,254,390,249,255],[345,346,261,265,372],[256,452,453,463,362,382],[446,359,467,445,276,353],[277,437,399,412,357,350],[278,439,392,438,440,360,279],[447,366,352,346,340,372,454],[352,280,347,448,261,340,345],[280,330,348,449,448,346],[347,330,329,349,450,449],[348,329,277,350,451,450],[349,277,343,357,452,451],[412,419,197,6,417,465],[376,280,346,345,366],[265,446,342,276,383],[461,462,370,2,19,1,274],[371,429,420,437,277,329],[454,264,368,389],[350,343,412,465,453,452],[423,331,279,371,266],[446,255,263,467,342],[279,344,440,363,420,429],[288,435,433,401,323],[382,341,463,414,398],[360,440,275,281,456,420],[365,430,434,397],[379,394,430,364,397],[323,401,376,352,345,447],[397,434,416,288],[356,264,383,300,301,389],[400,428,262,378],[164,2,354,462],[266,358,279,429,355,329,330],[454,345,340,265,383,264],[254,477,473,474,390],[477,253,380,476,473],[273,321,307,308,291],[401,433,411,280,352,366],[152,175,396,400],[400,369,262,395,379],[378,395,431,394,365],[374,253,252,381,476],[380,252,256,382,398,384,476],[381,256,341,362,398],[264,372,265,353,276,300,368],[476,381,398,414,441,286,385],[473,476,384,286,258,475,386],[387,474,473,385,475,257],[388,474,386,257,259],[466,474,387,259,260,467],[356,368,301,251],[339,254,373,474,249],[322,270,269,393,460,327,423,426],[439,289,438,344],[391,269,267,164,462,326,328,460],[379,431,430,365],[378,262,431,379],[377,175,199,428,400],[365,364,434,367,288],[381,382,362,414,384],[437,456,248,419,412,343],[377,396,428,369,378],[361,433,376,366,323],[403,317,312,311,318],[404,316,317,402,318,320],[405,316,403,320,321],[406,314,315,316,404,321,335],[418,313,314,405,335,424],[308,325,415,270,408],[308,407,270,409],[291,306,292,408,270,322,410],[287,291,409,322,436],[433,427,425,280,376],[343,399,419,351,465,357],[414,463,464,417,285,441],[398,362,463,413,441,384],[325,324,272,304,407],[367,434,432,436,427,433,435,288],[464,465,351,6,168,8,285,413],[262,421,313,406,424,431],[399,248,195,197,351,412],[429,360,363,456,437,355],[262,428,200,18,313,418],[430,424,273,287,432,434],[426,391,327,294,331,358,266],[431,418,406,335,273,422,430],[411,427,426,266,330,280],[427,436,322,391,423,266,425],[433,416,436,426,425,411],[369,400,396,199,200,421,262],[279,360,420,355,371],[365,394,431,424,422,434,364],[379,395,262,418,424,430,394],[434,422,287,436,416],[435,416,427,411,376,401,361],[367,397,364,430,422,432,416],[288,416,433,361],[416,432,287,410,322,426,427],[355,420,456,399,343,277],[392,305,309,440,344],[455,392,344,278,294],[344,438,309,457,275,363,360],[286,384,414,413,285,336,442],[257,475,258,286,441,336,295],[444,259,257,295,282],[445,260,259,443,282,283],[342,467,260,444,283,276],[265,261,255,359,342,353],[323,366,345,454],[346,347,449,339,255,261],[347,348,450,254,339,448],[449,348,349,451,253,254],[450,349,350,452,256,252,253],[451,350,357,453,341,256],[452,357,465,464,463,341],[323,447,345,372,264,356],[327,460,289,439,294],[420,363,281,248,399,437],[309,459,274,275,440],[328,326,461,274,459],[290,328,458,274,457,309],[327,391,393,328,290,305,289,455],[326,462,354,274,458],[326,393,164,370,354,461],[362,341,453,464,413,414],[453,465,417,413,463],[453,357,412,351,417,464],[263,249,474,388],[342,359,263,388,260,445],[469,153,145,144,471,159,470,158],[173,154,153,468,158,157],[158,468,159,27,222,28],[468,144,163,7,161,160,159],[23,24,144,145,153],[373,477,374,476,385,386,474],[466,249,390,373,473,386,387,388],[386,385,258,442,257],[473,374,380,381,384,385],[254,253,374,473,373]]
		static {
		    this.calculateMap(); // Ensure the map is calculated when the class is defined
		  }

  // Data for one face
		constructor(tracker, dimensionality) {
			super({
				type:"face", 
				tracker, 
				dimensionality
			});
			
			this.blendShapes = {};
			CATEGORIES.forEach((c) => (this.blendShapes[c] = 0));

	// useful points
			let singleKeys = [ "center", "dirLength", "dirWidth"]
			singleKeys.forEach(key => {
				this[key] = this.createMetaVector(key)
			})

			let getLandmarks = i => this.landmarks[i]


	// Easy access
			this.forehead = this.landmarks[CONTOURS.centerLine[0]]
			this.nose = this.landmarks[CONTOURS.centerLine[9]]
			this.chin = this.landmarks[CONTOURS.centerLine[26]]
			
			this.centerLine = CONTOURS.centerLine.map(getLandmarks)
			this.mouthRings = CONTOURS.mouthRings.map(ring => ring.map(getLandmarks))
			
			this.side = [{},{}]
			this.side.forEach((side,i) => {
				let sideKeys = ["irisDir",
					"eyeCenter",
					"eyeDirOut", "eyeDirUp",
					"earDirOut", "earDirUp",]

				sideKeys.forEach(key => {
					side[key] = this.createMetaVector(key + "-" + i)
				})

				side.irisCenter = this.landmarks[CONTOURS.sides[i].irisCenter]
				side.irisRing = CONTOURS.sides[i].irisRing.map(getLandmarks)

	  // Set up names for some side landmarks
				side.ear = this.landmarks[CONTOURS.sides[i].faceRings[0][8]]
				side.earTop = this.landmarks[CONTOURS.sides[i].faceRings[0][7]]
				side.earBottom = this.landmarks[CONTOURS.sides[i].faceRings[0][9]]
				
				side.eyeRings = CONTOURS.sides[i].eyeRings.map(ring => {
					return ring.map(index => this.landmarks[index])
				})

				side.faceRings = CONTOURS.sides[i].faceRings.map(ring => {
					return ring.map(index => this.landmarks[index])
				})

				// side.mouthRings = CONTOURS.sides[i].mouthRings.map(ring => {
				// 	return ring.map(index => this.landmarks[index])
				// })

				let eyeContour = CONTOURS.sides[i].eyeRings[4];
				side.eyeInner = this.landmarks[eyeContour[1]]
				side.eyeOuter = this.landmarks[eyeContour[8]]
				side.eyeTop = this.landmarks[eyeContour[4]]
				side.eyeBottom = this.landmarks[eyeContour[12]]

				side.blink = 0
				side.eyeSize = 0



			})

			this.axis0 = [this.forehead, this.chin]
			this.axis1 = this.side.map(side => side.ear)
		}


		forEachSide(fxn) {
	// Do something for each side
	// TODO, put the correct side forward
			for (var i = 0; i < 2; i++) {
				fxn(CONTOURS.sides[i], i);
			}
		}


  // Do meta calculations
		calculateMetaTrackingData() {
			super.calculateMetaTrackingData()

			const setToLandmark = (v, index) => {
				setTo(v, this.landmarks[index])
			}

			const setToAverageOfIndices = (v, indices) => {
				setToAverage(v, indices.map(index => this.landmarks[index]))
			}


			this.side.forEach((side,i) => {
				setToDifference(side.earDirOut, side.ear, this.nose)

	  // Calculate eye metadata
				let eyeContour = CONTOURS.sides[i].eyeRings[4];

				setToAverage(side.eyeCenter, [side.eyeOuter, side.eyeInner])


				setToDifference(side.eyeDirOut, side.eyeOuter, side.eyeInner)
				setToDifference(side.eyeDirUp, side.eyeTop, side.eyeBottom)

				side.eyeSize = magnitude(side.eyeDirOut)
				side.eyeBlink = magnitude(side.eyeDirUp)
				setToDifference(side.irisDir, side.irisCenter, side.eyeCenter)

			})

			setToDifference(this.dirWidth, this.side[1].ear, this.side[0].ear)
			setToDifference(this.dirLength, this.chin, this.forehead)

			setToAverage(this.center, [this.chin, this.forehead])

			// calculate angles

			
			

			function setContourAngle(contour, center) {

				for (var i = 0; i < contour.length; i++) {
					let pt0 = contour[(contour.length + i - 1)%contour.length]
					let pt1 = contour[(contour.length + i)%contour.length]
					let pt2 = contour[(contour.length + i + 1)%contour.length]
					
					pt1.dir0.setToDifference(pt2, pt0).normalize()
					pt1.dir1.setToDifference(pt1, center).normalize()

				}
			}
			this.side.forEach(side => {
				side.eyeRings.forEach(c => setContourAngle(c, side.eyeCenter))
				side.faceRings.forEach(c => setContourAngle(c, this.center))
			})

		}
	}
	
  /*
  ====================================================================================

  POSES
  ====================================================================================
  */
	class Pose extends Trackable {
		static LANDMARK_COUNT = 32
			  static {
		    this.calculateMap(); // Ensure the map is calculated when the class is defined
		  }

  // Data for one oase
		constructor(tracker, dimensionality) {
			super({
				type:"pose", 
				tracker, 
				dimensionality
			});

		}

		calculateMetaTrackingData() {
			super.calculateMetaTrackingData()
		}
	}

  /*
  ====================================================================================

  HANDS
  ====================================================================================
  */
	class Hand extends Trackable {

		static LANDMARK_COUNT = 21
	  static {
		    this.calculateMap(); // Ensure the map is calculated when the class is defined
		  }

		constructor(tracker, dimensionality) {
			super({
				tracker, 
				type:"hand", 
				dimensionality
			});
			
			this.axis0 = [this.landmarks[9], this.landmarks[0]]
			this.axis1 = [this.landmarks[2], this.landmarks[17]]
			this.wrist = this.landmarks[0]

			
			this.handedness = undefined;

			this.fingers = Array.from({length:5}, (x, i)=> {
				let joints = CONTOURS.fingers[i].map(index => this.landmarks[index])
				return {
					pinchAmt: 0,
					dir:this.createMetaVector("dir" + i) ,
					joints,
					tip: joints[joints.length - 1],
					thumbPinch: this.createMetaVector("thumbPinch" + i),
				}

			})

			this.pinches = []

		}

		calculateMetaTrackingData() {
			super.calculateMetaTrackingData()

		
			// console.log(this.dir0.toFixed(), this.dir1.toFixed())
			// console.log(this.axis0.map(s=> s.toFixed(2)), this.axis1.map(s=> s.toFixed(2)))
	
			this.fingers.forEach((finger,index) => {

				let last = this.wrist
				for (var i = 0; i < finger.joints.length; i++) {
					let pt1 = finger.joints[i]
					let pt2 = finger.joints[i + 1]
					
					pt1.dir0.setToDifference(pt1, last).normalize()
					// console.log(pt0.dir0.toFixed(2), pt1.dir1.toFixed(2))
					last = pt1
				}

				let scale = remap(finger.tip.z, -50, 300, 1, 0)
				finger.scale = scale**4
				// How much bigger are x y than they seem?
				
				let thumbTip = this.landmarks[4]
				setToDifference(finger.dir, finger.tip, finger.joints[2])
				setToDifference(finger.thumbPinch, finger.tip, thumbTip)

				// Is this finger pinching?

				// pixels are more distance at the back than at the front?
				
				finger.pinchAmt = Math.max(0, 40 - finger.thumbPinch.magnitude/finger.scale)
				if (finger.pinchAmt > 0) {

					if (!finger.isPinching) {
						// start pinch
						finger.isPinching = true
						finger.onStartPinch?.(finger)
						let start = KVector.lerp(thumbTip, finger.tip, .5)
						finger.pinch = {
							start,
							pts: [],
						}
					}
					finger.onPinchMove?.(finger)
					finger.pinch.pts.push(KVector.lerp(thumbTip, finger.tip, .5))
				} else {
					// Stop pinch
					finger.isPinching = false
					finger.onStopPinch?.(finger)
					finger.pinch = undefined
				}
				

				// Check for pinching
				// Are any fingers pinching with the thumb?

			})

			let square = this.fingers.map(f => f.joints[0]).concat(this.fingers.map(f => f.joints[0]))
			this.center.setToAverage(square)
		}


	}




	class Tracker {
		constructor({
			maxHistory=  10,
			numHands= 6,
			numPoses= 3,
			numFaces= 3,
			
			modulePath,
			modelPaths,

			gpu=true,
			createLandmark

		} = {}) {

			if (!createLandmark)
				createLandmark = function(x,y,z) {
					return new KVector(x, y, z)
				}

				this.scale = 1

				if (modulePath && modelPaths)
					this.loadModels({modulePath, modelPaths})
				else {
					console.log(`Missing module path ${modulePath} or model paths (${modelPaths})`)
				}

				this.rawLandmarkData = {
					"hand":undefined,
					"pose":undefined,
					"face":undefined,
				}

				this.createLandmark = createLandmark

				this.vToData = (v) => {
					return `[${[pt.x,pt.y,pt.z].map(s => s.toFixed(3).join(","))}]`;
				}


				this.isActive = true;
				this.config = {
				cpuOrGpuString:gpu?"GPU":CPU /* "GPU" or "CPU" */,
					numHands,
					numFaces,
					numPoses,
					doAcquireFaceMetrics:numFaces>0,
					doAcquireHandMetrics:numHands>0,
					doAcquirePoseMetrics:numPoses>0,

				};
				console.log(`Tracker loaded, watching for ${numHands} hands, ${numFaces} faces, ${numPoses} poses, `)
				this.faces = Array.from({length:numFaces}, ()=> new Face(this))
				this.hands = Array.from({length:numHands}, ()=> new Hand(this))
				this.poses = Array.from({length:numPoses}, ()=> new Pose(this))

			// A place to store the landmarking models
				this.landmarkerModels = {}

				this.playbackInterval = undefined;
				this.frameIndex = 0;
			}

			get sourceDimensions() {
				return [this.source.width, this.source.height]
			}


			drawSource({p, flip=false, x = 0, y = 0, scale = 1.0}) {

				if (this.source) {
					p.push()
					p.translate(x, y)
					p.scale(scale)
					p.push()
					if (flip) {
						p.translate(this.source.width, 0)
						p.scale(-1, 1)
					}
					p.image(this.source, 0,0)
					p.pop()
					p.pop()
				}
			}

			drawDebugData(settings) {
				this.trackables.forEach(trackable => {
					if (trackable.isActive) trackable.drawDebugData(settings)
				})
			}

			get trackables() {
				return [].concat(this.faces, this.hands, this.poses)
			}

			get activeTrackables() {
				return this.trackables.filter(tr => tr.isActive)
			}


			async loadModels({modulePath,modelPaths}) {
	/**
	 * Load the models
	 **/

				let visionBundlePath = modulePath  + "vision_bundle.js"
				console.log("Load tracker modules:")
				console.log("  Module path", modulePath, visionBundlePath, modelPaths)

				this.mediapipe_module = await import(visionBundlePath);
				this.vision = await this.mediapipe_module
				.FilesetResolver.forVisionTasks(modulePath);

	// Load all the model files
				Object.entries(modelPaths).forEach(([type,path]) => {
		// Load this model
					let modelAssetPath = modelPaths[type]

					let typeCap = type.charAt(0).toUpperCase() + type.slice(1)
					let LandmarkerClass = this.mediapipe_module[typeCap + "Landmarker"]

					LandmarkerClass.createFromOptions(
						this.vision,
						{
							...this.config,
							runningMode: "VIDEO",
							baseOptions: {
								delegate: this.config.cpuOrGpuString,
								modelAssetPath
							},
						}).then(landmarker => {
						// console.log("  Loaded landmarker and model for ", type)
							this.landmarkerModels[type] = landmarker
						}) ;

					})

			}

			async detectType({type, afterLandmarkUpdate,afterMetaUpdate, afterTypeUpdate}) {
			// Detect this type from the source
				let model = this.landmarkerModels[type];
				let trackables = this[type + "s"]
				let startTimeMs = performance.now();

				if (model) {
	            // Await the asynchronous operation
					let rawResult = model.detectForVideo(this.source.elt, startTimeMs)

            	// Store the raw data
	            // Some models store it differently
					let lmKey = type=="face"?"faceLandmarks":"landmarks"
					let result = rawResult[lmKey]

					trackables.forEach((trackable, index) => {
		    		// find the right trackable and update its landmark data
		    		// TODO - more complicated matching?
						trackable.setLandmarksFromTracker(result[index], this.sourceDimensions)
						afterLandmarkUpdate?.({trackable, type, index})
						trackable.calculateMetaTrackingData()
						afterMetaUpdate?.({trackable, type, index})
					})

				}
				afterTypeUpdate?.({trackables, type})
			}


			async detect({afterLandmarkUpdate,afterMetaUpdate, afterTypeUpdate}) {
				if (!this.source) {
					// console.warn("no video source provided!")
					return
				}
				let t = performance.now();
			// Make sure we are not making double predictions?
				if (t - this.lastPredictionTime > 10) {

				// Run all the detectors		
					["hand", "face", "pose"].forEach(type => this.detectType({type, afterLandmarkUpdate, afterMetaUpdate}))

				}

				this.lastPredictionTime = t;
			}



		}

		return Tracker
	})();
